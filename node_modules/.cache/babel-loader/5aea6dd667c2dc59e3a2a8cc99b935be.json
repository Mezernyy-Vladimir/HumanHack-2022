{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { setRefreshToken } from '../../redux/slices/auth';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      // здесь должен быть axios запрос на получение refresh token с дальнейшим прокидыванием данных в redux\n      // так же нужно засетать в локал стораж дынные по токенам\n      dispatch(setRefreshToken());\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  }, []); // eslint-disable-next-line react/jsx-no-useless-fragment\n\n  return isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"loading\"\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(AuthProvider, \"eFm8crSAkr8WxG479cqKfVPu6ds=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/shrek/bred.li-hack/src/features/authProvider/index.tsx"],"names":["React","useEffect","useState","useAppDispatch","setRefreshToken","AuthProvider","children","dispatch","isLoading","setIsLoading","localStorage","getItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;;AAEA,MAAMC,YAAgB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAMC,QAAQ,GAAGJ,cAAc,EAA/B;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,IAAV,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjC;AACA;AACAJ,MAAAA,QAAQ,CAACH,eAAe,EAAhB,CAAR;AACAK,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALD,MAKO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GATQ,EASN,EATM,CAAT,CAJyC,CAezC;;AACA,SAAOD,SAAS,gBAAG;AAAA;AAAA,mBAAH,gBAAkB;AAAA,cAAGF;AAAH,mBAAlC;AACD,CAjBD;;GAAMD,Y;UACaF,c;;;KADbE,Y;AAmBN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, FC, useState } from 'react';\n\nimport { useAppDispatch } from '../../redux/hooks';\nimport { setRefreshToken } from '../../redux/slices/auth';\n\nconst AuthProvider: FC = ({ children }) => {\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      // здесь должен быть axios запрос на получение refresh token с дальнейшим прокидыванием данных в redux\n      // так же нужно засетать в локал стораж дынные по токенам\n      dispatch(setRefreshToken());\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return isLoading ? <>loading</> : <>{children}</>;\n};\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}